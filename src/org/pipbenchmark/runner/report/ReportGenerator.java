package org.pipbenchmark.runner.report;

import java.util.*;

import org.pipbenchmark.*;
import org.pipbenchmark.runner.*;

import java.io.*;
import java.text.*;

public class ReportGenerator {
    private final static String SeparatorLine = "***************************************************************\r\n";
    private final static String NewLine = "\r\n";
    private final static DateFormat DateFormat = new SimpleDateFormat("EEE, MMMMM d, yyyy");
    private final static DateFormat TimeFormat = new SimpleDateFormat("HH:mm:ss");
    
    private BenchmarkRunner _runner;
    
    public ReportGenerator(BenchmarkRunner runner) {
        _runner = runner;
    }

    public BenchmarkRunner getRunner() {
        return _runner;
    }
    
    public String generateReport() {
        StringBuilder builder = new StringBuilder();
        generateHeader(builder);
        generateTestList(builder);

        if (getRunner().getProcess().getResults().size() > 1) {
            generateMultipleResults(builder);
        } else {
            generateSingleResult(builder);
        }
        
        generateSystemInformation(builder);
        generateSystemBenchmark(builder);
        generateConfigurationParameters(builder);
        return builder.toString();
    }

    private void generateHeader(StringBuilder builder) {
        builder.append(SeparatorLine);
        builder.append(NewLine);
        builder.append("             P E R F O R M A N C E    R E P O R T");
        builder.append(NewLine);
        builder.append(NewLine);
        builder.append("                 Generated by Pip.Benchmark");
        builder.append(NewLine);
        builder.append(String.format("          at %s, %s", 
            formatDate(new Date().getTime()), formatTime(new Date().getTime())));
        builder.append(NewLine);
        builder.append(SeparatorLine);
        builder.append(NewLine);
    }

    private void generateTestList(StringBuilder builder) {
        builder.append("Executed Benchmarks:");
        builder.append(NewLine);
        int index = 0;
        for (BenchmarkInstance test : getRunner().getSuiteManager().getSelectedBenchmarks()) {
            index++;
            builder.append(String.format("  %d. %s.%s [%d%%]",
                index, test.getSuite().getName(), test.getName(), test.getProportion()));
            builder.append(NewLine);
        }
        builder.append(NewLine);
    }

    private void generateMultipleResults(StringBuilder builder) {
        builder.append("Benchmarking Results:");
        builder.append(NewLine);

        List<BenchmarkResult> results = getRunner().getProcess().getResults();
        String[][] resultTable = new String[results.size() + 1][4];

        // Fill column headers
        resultTable[0][0] = "Benchmark";
        resultTable[0][1] = "Performance (tps)";
        resultTable[0][2] = "CPU Load (%)";
        resultTable[0][3] = "Memory Usage (Mb)";

        int[] columnSizes = new int[] { 9, 17, 12, 17 };

        for (int index = 0; index < results.size(); index++) {
            resultTable[index + 1][0] = results.get(index).getBenchmarks().get(0).getFullName();
            columnSizes[0] = Math.max(resultTable[index + 1][0].length(), columnSizes[0]);

            resultTable[index + 1][1] = formatNumber(
            	results.get(index).getPerformanceMeasurement().getAverageValue());
            columnSizes[1] = Math.max(resultTable[index + 1][1].length(), columnSizes[1]);

            resultTable[index + 1][2] = formatNumber(
            	results.get(index).getCpuLoadMeasurement().getAverageValue());
            columnSizes[2] = Math.max(resultTable[index + 1][2].length(), columnSizes[2]);

            resultTable[index + 1][3] = formatNumber(
            	results.get(index).getMemoryUsageMeasurement().getAverageValue());
            columnSizes[3] = Math.max(resultTable[index + 1][3].length(), columnSizes[3]);
        }

        for (int rowIndex = 0; rowIndex < results.size() + 1; rowIndex++) {
            // Draw upper line
            if (rowIndex == 0) {
                builder.append('+');
                for (int columnIndex = 0; columnIndex < 4; columnIndex++) {
                    builder.append(padStringRight("", columnSizes[columnIndex], "-"));
                    builder.append('+');
                }
                builder.append(NewLine);
            }

            // Draw content
            builder.append('|');
            builder.append(padStringRight(resultTable[rowIndex][0], columnSizes[0], " "));
            builder.append('|');
            builder.append(padStringLeft(resultTable[rowIndex][1], columnSizes[1], " "));
            builder.append('|');
            builder.append(padStringLeft(resultTable[rowIndex][2], columnSizes[2], " "));
            builder.append('|');
            builder.append(padStringLeft(resultTable[rowIndex][3], columnSizes[3], " "));
            builder.append('|');
            builder.append(NewLine);

            // Draw bottom line
            builder.append('+');
            for (int columnIndex = 0; columnIndex < 4; columnIndex++) {
                builder.append(padStringRight("", columnSizes[columnIndex], "-"));
                builder.append('+');
            }
            builder.append(NewLine);
        }

        builder.append(NewLine);
    }

    private String padStringLeft(String value, int length, String padSymbol) {
        StringBuilder builder = new StringBuilder();
        builder.append(padSymbol);
        builder.append(value);
        builder.append(padSymbol);

        while (builder.length() < length + 2) {
            builder.insert(0, padSymbol);
        }

        return builder.toString();
    }

    private String padStringRight(String value, int length, String padSymbol) {
        StringBuilder builder = new StringBuilder();
        builder.append(padSymbol);
        builder.append(value);
        builder.append(padSymbol);

        while (builder.length() < length + 2) {
            builder.append(padSymbol);
        }

        return builder.toString();
    }

    private void generateSingleResult(StringBuilder builder) {
        if (getRunner().getProcess().getResults().size() == 0) {
            return;
        }
        BenchmarkResult result = getRunner().getProcess().getResults().get(0);

        builder.append("Benchmarking Results:");
        builder.append(NewLine);
        if (getRunner().getProcess().getMeasurementType() == MeasurementType.Peak) {
            builder.append("  Measurement Type: Peak Performance");
        } else {
            builder.append(String.format("  Measurement Type: Nominal Performance at %f tps",
                getRunner().getProcess().getNominalRate()));
        }
        builder.append(NewLine);

        Date startTime = new Date(result.getStartTime());
        builder.append(String.format("  Start Time:   %s", formatTime(startTime.getTime())));
        builder.append(NewLine);
        Date endTime = new Date(result.getStartTime() + result.getElapsedTime());
        builder.append(String.format("  End Time:     %s", formatTime(endTime.getTime())));
        builder.append(NewLine);
        Date elapsedTime = new Date(result.getElapsedTime());
        builder.append(String.format("  Elapsed Time: %s", formatTimeSpan(elapsedTime.getTime())));
        builder.append(NewLine);
        builder.append(String.format("  Min Performance (tps):     %.2f",
            result.getPerformanceMeasurement().getMinValue()));
        builder.append(NewLine);
        builder.append(String.format("  Average Performance (tps): %.2f",
            result.getPerformanceMeasurement().getAverageValue()));
        builder.append(NewLine);
        builder.append(String.format("  Max Performance (tps):     %.2f",
            result.getPerformanceMeasurement().getMaxValue()));
        builder.append(NewLine);
        builder.append(String.format("  Min CPU Load (%%):          %.2f",
            result.getCpuLoadMeasurement().getMinValue()));
        builder.append(NewLine);
        builder.append(String.format("  Average CPU Load (%%):      %.2f",
            result.getCpuLoadMeasurement().getAverageValue()));
        builder.append(NewLine);
        builder.append(String.format("  Max CPU Load (%%):          %.2f",
            result.getCpuLoadMeasurement().getMaxValue()));
        builder.append(NewLine);
        builder.append(String.format("  Min Memory Usage (Mb):     %.2f",
            result.getMemoryUsageMeasurement().getMinValue()));
        builder.append(NewLine);
        builder.append(String.format("  Average Memory Usage (Mb): %.2f",
            result.getMemoryUsageMeasurement().getAverageValue()));
        builder.append(NewLine);
        builder.append(String.format("  Max Memory Usage (Mb):     %.2f",
            result.getMemoryUsageMeasurement().getMaxValue()));
        builder.append(NewLine);
        builder.append(NewLine);
    }

    private void generateSystemInformation(StringBuilder builder) {
        builder.append("System Information:");
        builder.append(NewLine);
        for (Map.Entry<String, String> pair : getRunner().getEnvironmentState().getSystemInformation().entrySet()) {
            builder.append(String.format("  %s: %s", pair.getKey(), pair.getValue()));
            builder.append(NewLine);
        }
        builder.append(NewLine);
    }

    private void generateSystemBenchmark(StringBuilder builder) {
        builder.append("System Benchmarking:");
        builder.append(NewLine);
        builder.append(String.format("  CPU Performance (MFLOP/s): %.2f",
            getRunner().getEnvironmentState().getCpuBenchmark()));
        builder.append(NewLine);
        builder.append(String.format("  Video Performance (GOP/s): %.2f",
            getRunner().getEnvironmentState().getVideoBenchmark()));
        builder.append(NewLine);
        builder.append(String.format("  Disk Performance (MB/s):   %.2f",
            getRunner().getEnvironmentState().getDiskBenchmark()));
        builder.append(NewLine);
        builder.append(NewLine);
    }

    private void generateConfigurationParameters(StringBuilder builder) {
        builder.append("Parameters:");
        builder.append(NewLine);
        for (Parameter parameter : getRunner().getConfigurationManager()
        	.getAllParameters()) {
            builder.append(String.format("  %s=%s", parameter.getName(), parameter.getValue()));
            builder.append(NewLine);
        }
        builder.append(NewLine);
    }

    public void saveReportToFile(String fileName) throws IOException {
    	FileOutputStream stream = new FileOutputStream(fileName);
        try {
            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(stream));
            try {
            	writer.write(generateReport());
            } finally {
            	writer.close();
            }
        } finally {
        	stream.close();
        }
    }

	private String formatNumber(double value) {
		return String.format("%.2f", value);
	}

	private String formatDate(long ticks) {
		return DateFormat.format(new Date(ticks));
	}
	
	private String formatTime(long ticks) {
		return TimeFormat.format(new Date(ticks));
	}
	
	private String formatTimeSpan(long ticks) {
		long millis = ticks % 1000;
		long seconds = (ticks / 1000) % 60;
		long minutes = (ticks / 1000 / 60) % 60;
		long hours = ticks / 1000 / 60 / 60;
		return String.format("%02d:%02d:%02d.%d", hours, minutes, seconds, millis);
	}
}
