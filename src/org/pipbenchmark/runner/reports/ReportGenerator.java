package org.pipbenchmark.runner.reports;

import org.pipbenchmark.*;
import org.pipbenchmark.runner.benchmarks.*;
import org.pipbenchmark.runner.config.*;
import org.pipbenchmark.runner.environment.*;
import org.pipbenchmark.runner.params.*;
import org.pipbenchmark.runner.results.*;
import org.pipbenchmark.util.Formatter;

import java.io.*;
import java.util.Date;
import java.util.List;
import java.util.Map;

public class ReportGenerator {
    private final static String SeparatorLine = "***************************************************************\r\n";
    private final static String NewLine = "\r\n";
    
    private ConfigurationManager _configuration;
    private ResultsManager _results;
    private ParametersManager _parameters;
    private BenchmarksManager _benchmarks;
    private EnvironmentManager _environment;
    
    public ReportGenerator(ConfigurationManager configuration,
    	ResultsManager results, ParametersManager parameters,
    	BenchmarksManager benchmarks, EnvironmentManager environment) {
    	_configuration = configuration;
    	_results = results;
    	_parameters = parameters;
    	_benchmarks = benchmarks;
    	_environment = environment;
    }
    
    public String generate() {
        StringBuilder builder = new StringBuilder();
        generateHeader(builder);
        generateBenchmarkList(builder);

        if (_results.getAll().size() > 1) {
            generateMultipleResults(builder);
        } else {
            generateSingleResult(builder);
        }
        
        generateSystemInfo(builder);
        generateSystemBenchmark(builder);
        generateParameters(builder);
        return builder.toString();
    }

    public void saveToFile(String fileName) throws IOException {
    	FileOutputStream stream = new FileOutputStream(fileName);
        try {
            BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(stream));
            try {
            	writer.write(generate());
            } finally {
            	writer.close();
            }
        } finally {
        	stream.close();
        }
    }

    private void generateHeader(StringBuilder builder) {
        builder.append(SeparatorLine);
        builder.append(NewLine);
        builder.append("             P E R F O R M A N C E    R E P O R T");
        builder.append(NewLine);
        builder.append(NewLine);
        builder.append("                 Generated by Pip.Benchmark");
        builder.append(NewLine);
        builder.append(String.format("          at %s, %s", 
            Formatter.formatDate(new Date().getTime()), Formatter.formatTime(new Date().getTime())));
        builder.append(NewLine);
        builder.append(SeparatorLine);
        builder.append(NewLine);
    }

    private void generateBenchmarkList(StringBuilder builder) {
        builder.append("Executed Benchmarks:");
        builder.append(NewLine);
        int index = 0;
        for (BenchmarkInstance test : _benchmarks.getSelected()) {
            index++;
            builder.append(String.format("  %d. %s.%s [%d%%]",
                index, test.getSuite().getName(), test.getName(), test.getProportion()));
            builder.append(NewLine);
        }
        builder.append(NewLine);
    }

    private void generateMultipleResults(StringBuilder builder) {
        builder.append("Benchmarking Results:");
        builder.append(NewLine);

        List<BenchmarkResult> results = _results.getAll();
        String[][] resultTable = new String[results.size() + 1][4];

        // Fill column headers
        resultTable[0][0] = "Benchmark";
        resultTable[0][1] = "Performance (tps)";
        resultTable[0][2] = "CPU Load (%)";
        resultTable[0][3] = "Memory Usage (Mb)";

        int[] columnSizes = new int[] { 9, 17, 12, 17 };

        for (int index = 0; index < results.size(); index++) {
            resultTable[index + 1][0] = results.get(index).getBenchmarks().get(0).getFullName();
            columnSizes[0] = Math.max(resultTable[index + 1][0].length(), columnSizes[0]);

            resultTable[index + 1][1] = Formatter.formatNumber(
            	results.get(index).getPerformanceMeasurement().getAverageValue());
            columnSizes[1] = Math.max(resultTable[index + 1][1].length(), columnSizes[1]);

            resultTable[index + 1][2] = Formatter.formatNumber(
            	results.get(index).getCpuLoadMeasurement().getAverageValue());
            columnSizes[2] = Math.max(resultTable[index + 1][2].length(), columnSizes[2]);

            resultTable[index + 1][3] = Formatter.formatNumber(
            	results.get(index).getMemoryUsageMeasurement().getAverageValue());
            columnSizes[3] = Math.max(resultTable[index + 1][3].length(), columnSizes[3]);
        }

        for (int rowIndex = 0; rowIndex < results.size() + 1; rowIndex++) {
            // Draw upper line
            if (rowIndex == 0) {
                builder.append('+');
                for (int columnIndex = 0; columnIndex < 4; columnIndex++) {
                    builder.append(Formatter.padRight("", columnSizes[columnIndex], "-"));
                    builder.append('+');
                }
                builder.append(NewLine);
            }

            // Draw content
            builder.append('|');
            builder.append(Formatter.padRight(resultTable[rowIndex][0], columnSizes[0], " "));
            builder.append('|');
            builder.append(Formatter.padLeft(resultTable[rowIndex][1], columnSizes[1], " "));
            builder.append('|');
            builder.append(Formatter.padLeft(resultTable[rowIndex][2], columnSizes[2], " "));
            builder.append('|');
            builder.append(Formatter.padLeft(resultTable[rowIndex][3], columnSizes[3], " "));
            builder.append('|');
            builder.append(NewLine);

            // Draw bottom line
            builder.append('+');
            for (int columnIndex = 0; columnIndex < 4; columnIndex++) {
                builder.append(Formatter.padRight("", columnSizes[columnIndex], "-"));
                builder.append('+');
            }
            builder.append(NewLine);
        }

        builder.append(NewLine);
    }

    private void generateSingleResult(StringBuilder builder) {
        if (_results.getAll().size() == 0) {
            return;
        }
        BenchmarkResult result = _results.getAll().get(0);

        builder.append("Benchmarking Results:");
        builder.append(NewLine);
        if (_configuration.getMeasurementType() == MeasurementType.Peak) {
            builder.append("  Measurement Type: Peak Performance");
        } else {
            builder.append(String.format("  Measurement Type: Nominal Performance at %f tps",
                _configuration.getNominalRate()));
        }
        builder.append(NewLine);

        Date startTime = new Date(result.getStartTime());
        builder.append(String.format("  Start Time:   %s", Formatter.formatTime(startTime.getTime())));
        builder.append(NewLine);
        Date endTime = new Date(result.getStartTime() + result.getElapsedTime());
        builder.append(String.format("  End Time:     %s", Formatter.formatTime(endTime.getTime())));
        builder.append(NewLine);
        Date elapsedTime = new Date(result.getElapsedTime());
        builder.append(String.format("  Elapsed Time: %s", Formatter.formatTimeSpan(elapsedTime.getTime())));
        builder.append(NewLine);
        builder.append(String.format("  Min Performance (tps):     %.2f",
            result.getPerformanceMeasurement().getMinValue()));
        builder.append(NewLine);
        builder.append(String.format("  Average Performance (tps): %.2f",
            result.getPerformanceMeasurement().getAverageValue()));
        builder.append(NewLine);
        builder.append(String.format("  Max Performance (tps):     %.2f",
            result.getPerformanceMeasurement().getMaxValue()));
        builder.append(NewLine);
        builder.append(String.format("  Min CPU Load (%%):          %.2f",
            result.getCpuLoadMeasurement().getMinValue()));
        builder.append(NewLine);
        builder.append(String.format("  Average CPU Load (%%):      %.2f",
            result.getCpuLoadMeasurement().getAverageValue()));
        builder.append(NewLine);
        builder.append(String.format("  Max CPU Load (%%):          %.2f",
            result.getCpuLoadMeasurement().getMaxValue()));
        builder.append(NewLine);
        builder.append(String.format("  Min Memory Usage (Mb):     %.2f",
            result.getMemoryUsageMeasurement().getMinValue()));
        builder.append(NewLine);
        builder.append(String.format("  Average Memory Usage (Mb): %.2f",
            result.getMemoryUsageMeasurement().getAverageValue()));
        builder.append(NewLine);
        builder.append(String.format("  Max Memory Usage (Mb):     %.2f",
            result.getMemoryUsageMeasurement().getMaxValue()));
        builder.append(NewLine);
        builder.append(NewLine);
    }

    private void generateSystemInfo(StringBuilder builder) {
        builder.append("System Information:");
        builder.append(NewLine);
        for (Map.Entry<String, String> pair : _environment.getSystemInfo().entrySet()) {
            builder.append(String.format("  %s: %s", pair.getKey(), pair.getValue()));
            builder.append(NewLine);
        }
        builder.append(NewLine);
    }

    private void generateSystemBenchmark(StringBuilder builder) {
        builder.append("System Benchmarking:");
        builder.append(NewLine);
        builder.append(String.format("  CPU Performance (MFLOP/s): %.2f",
            _environment.getCpuMeasurement()));
        builder.append(NewLine);
        builder.append(String.format("  Video Performance (GOP/s): %.2f",
            _environment.getVideoMeasurement()));
        builder.append(NewLine);
        builder.append(String.format("  Disk Performance (MB/s):   %.2f",
            _environment.getDiskMeasurement()));
        builder.append(NewLine);
        builder.append(NewLine);
    }

    private void generateParameters(StringBuilder builder) {
        builder.append("Parameters:");
        builder.append(NewLine);
        for (Parameter parameter : _parameters.getAll()) {
            builder.append(String.format("  %s=%s", parameter.getName(), parameter.getValue()));
            builder.append(NewLine);
        }
        builder.append(NewLine);
    }

}
